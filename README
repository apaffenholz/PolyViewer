/***********************************************************************
 * Created by Andreas Paffenholz on 04/18/12.
 * Copyright 2012-2014 by Andreas Paffenholz.
 
 * This program is free software; you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the
 * Free Software Foundation; either version 2, or (at your option) any
 * later version: http://www.gnu.org/licenses/gpl.txt.
 
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * README
 * PolyViewer
 **************************************************************************/

PolyViewer is a simple reader for files created by polymake (polymake.org) 
released under the GPL.

Building PolyViewer requires that polymake-config can be found in your path (so in particular, polymake must be installed).
So either place this in /usr/bin, or add 

export PATH=$PATH:/path/to/your/polymake-config

to the file 

.bash_profile

in your $HOME folder.

For this reason there is currently no precompiled version of PolyViewer: 
  Paths are hardcoded into the project after compilation, so if your polymake is in a different location than mine it won't work.


PolyViewer now partially supports computation of new properties: right click on any property at the same level 
as the one you want to compute and choose "Compute property". Enter the property you want to have. This currently only
works for non-object properties. As a workaround to add e.g. a Hasse diagram enter "HASSE_DIAGRAM.ADJACENCY" (or any other property of the 
Hasse diagram you are interested in). Any string the polymake command "give" accepts that does not return a perl::Object should work.


--- 

internal notes

- including libpolymake requires
  - appropriate compiler/linker flags
  - the preprocessor macro: __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0 to avoid conflicts with functions starting with two underscores:
     full quote from AssertMacros.h
     *	A future release of Mac OS X will no longer do this, and will require that clients move to the
     *  new macros as defined above.  However, in the interim both the new and old macros will work, unless
     *  clients define a macro __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES before this file is included
     *  in their compilations.  Clients who do not want the older macros defined can accomplish this by adding
     *    #define __ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES 0
     *  at the top of their sources, or my adding -D__ASSERT_MACROS_DEFINE_VERSIONS_WITHOUT_UNDERSCORES=0 to the
     *  gcc compilation options.
     
